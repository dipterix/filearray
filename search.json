[{"path":"https://dipterix.org/filearray/articles/performance.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Performance Comparisons - (Numerical)","text":"mainly test performance double float data type. dimensions arrays 100x100x100x100. arrays around 800MB native R. R float precision. However, double array occupies 800MB space hard disk, float array uses half size (400MB).","code":"library(filearray)  options(digits = 3) filearray_threads() #> [1] 8  # Create file array and initialize partitions set.seed(1) file <- tempfile(); unlink(file, recursive = TRUE) x_dbl <- filearray_create(file, rep(100, 4)) x_dbl$initialize_partition()  file <- tempfile(); unlink(file, recursive = TRUE) x_flt <- filearray_create(file, rep(100, 4), type = 'float') x_flt$initialize_partition()  # 800 MB double array y <- array(rnorm(length(x_dbl)), dim(x_dbl))"},{"path":"https://dipterix.org/filearray/articles/performance.html","id":"simulation","dir":"Articles","previous_headings":"","what":"Simulation","title":"Performance Comparisons - (Numerical)","text":"simulation contains Writing along margin Writing chunks data Read data Read along margins Random access Collapse","code":""},{"path":[]},{"path":"https://dipterix.org/filearray/articles/performance.html","id":"write-along-margin","dir":"Articles","previous_headings":"Write","what":"1. Write along margin","title":"Performance Comparisons - (Numerical)","text":"Writing along margins refer something like x[,,,] <- v (along last margin), x[,,,] <- v (along second margin). always recommended write along last margin, always discouraged write along first margin file arrays. partition margin Write along fast margin Writing along slow margin current version, converting double float introduces overhead delays procedure.","code":"microbenchmark::microbenchmark(   double = {     for(i in 1:100){       x_dbl[,,,i] <- y[,,,i]     }   },   float = {     for(i in 1:100){       x_flt[,,,i] <- y[,,,i]     }   }, unit = 's', times = 3 )  #> Unit: seconds #>    expr   min    lq mean median   uq  max neval #>  double 0.933 0.935 1.44  0.936 1.69 2.45     3 #>   float 1.027 1.057 1.07  1.086 1.10 1.11     3 microbenchmark::microbenchmark(   double = {     for(i in 1:100){       x_dbl[,,i,] <- y[,,i,]     }   },   float = {     for(i in 1:100){       x_flt[,,i,] <- y[,,i,]     }   }, unit = 's', times = 3 )  #> Unit: seconds #>   expr  min   lq mean median   uq  max neval #> double 1.23 1.27 1.47   1.30 1.59 1.89     3 #>  float 1.23 1.24 1.41   1.24 1.50 1.76     3 microbenchmark::microbenchmark(   double = {     for(i in 1:100){       x_dbl[i,,,] <- y[i,,,]     }   },   float = {     for(i in 1:100){       x_flt[i,,,] <- y[i,,,]     }   }, unit = 's', times = 3 ) #> Unit: seconds #>    expr   min    lq  mean median    uq   max neval #>  double  3.18  3.22  3.28   3.27  3.32  3.38     3 #>   float 20.04 20.04 20.44  20.05 20.64 21.22     3"},{"path":"https://dipterix.org/filearray/articles/performance.html","id":"write-chunks-of-data","dir":"Articles","previous_headings":"Write","what":"2. Write chunks of data","title":"Performance Comparisons - (Numerical)","text":"Instead writing one slice time along margin, write 100x100x100x5 (10 slices) time. Write blocks data along partition margin Write blocks data along fast margin Write blocks data along slow margin","code":"microbenchmark::microbenchmark(   double = {     for(i in 1:10){       idx <- (i-1)*10 + 1:10       x_dbl[,,,idx] <- y[,,,idx]     }   },   float = {     for(i in 1:10){       idx <- (i-1)*10 + 1:10       x_flt[,,,idx] <- y[,,,idx]     }   }, unit = 's', times = 3 )  #> Unit: seconds #>    expr   min    lq  mean median    uq  max neval #>  double 0.650 0.684 0.911  0.718 1.041 1.37     3 #>   float 0.626 0.662 0.783  0.698 0.861 1.02     3 microbenchmark::microbenchmark(   double = {     for(i in 1:10){       idx <- (i-1)*10 + 1:10       x_dbl[,,idx,] <- y[,,idx,]     }   },   float = {     for(i in 1:10){       idx <- (i-1)*10 + 1:10       x_flt[,,idx,] <- y[,,idx,]     }   }, unit = 's', times = 3 )  #> Unit: seconds #>    expr   min    lq  mean median    uq   max neval #>  double 0.582 0.620 0.668  0.657 0.710 0.763     3 #>   float 0.625 0.652 0.732  0.679 0.786 0.893     3 microbenchmark::microbenchmark(   double = {     for(i in 1:10){       idx <- (i-1)*10 + 1:10       x_dbl[idx,,,] <- y[idx,,,]     }   },   float = {     for(i in 1:10){       idx <- (i-1)*10 + 1:10       x_flt[idx,,,] <- y[idx,,,]     }   }, unit = 's', times = 3 ) #> Unit: seconds #>    expr  min   lq mean median   uq  max neval #>  double 4.48 4.48 4.64   4.48 4.72 4.95     3 #>   float 2.64 2.70 2.73   2.77 2.78 2.79     3"},{"path":[]},{"path":"https://dipterix.org/filearray/articles/performance.html","id":"read-the-whole-array","dir":"Articles","previous_headings":"Read","what":"1. Read the whole array","title":"Performance Comparisons - (Numerical)","text":"","code":"microbenchmark::microbenchmark(   double = { x_dbl[] },   float = { x_flt[] },   unit = 's', times = 3 )  #> Unit: seconds #>    expr   min    lq  mean median    uq   max neval #>  double 0.155 0.172 0.185  0.188 0.200 0.211     3 #>   float 0.104 0.106 0.144  0.107 0.164 0.220     3"},{"path":"https://dipterix.org/filearray/articles/performance.html","id":"read-along-margins","dir":"Articles","previous_headings":"Read","what":"2. Read along margins","title":"Performance Comparisons - (Numerical)","text":"file array indexing close handling -memory arrays R!","code":"microbenchmark::microbenchmark(   farr_double_partition_margin = { x_dbl[,,,1] },   farr_double_fast_margin = { x_dbl[,,1,] },   farr_double_slow_margin = { x_dbl[1,,,] },   farr_float_partition_margin = { x_flt[,,,1] },   farr_float_fast_margin = { x_flt[,,1,] },   farr_float_slow_margin = { x_flt[1,,,] },   native_partition_margin = { y[,,,1] },   native_fast_margin = { y[,,1,] },   native_slow_margin = { y[1,,,] },   times = 100L, unit = \"ms\" )  #> Unit: milliseconds #>                          expr   min    lq  mean median    uq    max neval #>  farr_double_partition_margin  2.01  2.66  4.02   2.85  3.64  71.06   100 #>       farr_double_fast_margin  1.35  1.99  3.16   2.35  3.79  25.88   100 #>       farr_double_slow_margin 33.25 36.52 44.11  37.32 38.76 125.61   100 #>   farr_float_partition_margin  1.77  2.40  3.96   2.61  3.66  58.17   100 #>        farr_float_fast_margin  1.33  1.85  2.80   2.08  3.43  11.01   100 #>        farr_float_slow_margin 14.98 18.86 23.42  19.54 20.47 160.90   100 #>       native_partition_margin  3.42  3.75  4.14   4.02  4.27   6.89   100 #>            native_fast_margin  3.42  3.96  4.86   4.09  4.64  54.74   100 #>            native_slow_margin 21.52 22.15 24.34  22.65 23.97  91.06   100"},{"path":"https://dipterix.org/filearray/articles/performance.html","id":"random-access","dir":"Articles","previous_headings":"Read","what":"3. Random access","title":"Performance Comparisons - (Numerical)","text":"Random access faster base R (also much less memory!)","code":"# access 50 x 50 x 50 x 50 sub-array, with random indices idx1 <- sample(1:100, 50) idx2 <- sample(1:100, 50) idx3 <- sample(1:100, 50) idx4 <- sample(1:100, 50)  microbenchmark::microbenchmark(   farr_double = { x_dbl[idx1, idx2, idx3, idx4] },   farr_float = { x_flt[idx1, idx2, idx3, idx4] },   native = { y[idx1, idx2, idx3, idx4] },   times = 100L, unit = \"ms\" )  #> Unit: milliseconds #>         expr   min    lq mean median   uq   max neval #>  farr_double 11.68 13.13 18.9  13.81 15.2 143.3   100 #>   farr_float  8.29  8.89 12.0   9.95 10.6  63.6   100 #>       native 30.86 31.94 34.0  32.62 33.1 103.0   100"},{"path":"https://dipterix.org/filearray/articles/performance.html","id":"collapse","dir":"Articles","previous_headings":"","what":"Collapse","title":"Performance Comparisons - (Numerical)","text":"Collapse calculates margin sum/mean. Collapse function filearray uses single thread. bottle-neck often comes hard-disk accessing speed. However, still faster native R, memory-efficient. dipsaus package uses multiple threads collapse arrays -memory. 7~8x fast base R. File array 1~2x fast base R. dipsaus filearray little memory -heads.","code":"keep <- c(2, 4) output <- filearray_create(tempfile(), dim(x_dbl)[keep]) output$initialize_partition() microbenchmark::microbenchmark(   farr_double = { x_dbl$collapse(keep = keep, method = \"sum\") },   farr_float = { x_flt$collapse(keep = keep, method = \"sum\") },   native = { apply(y, keep, sum) },   dipsaus = { dipsaus::collapse(y, keep, average = FALSE) },   unit = \"s\", times = 5 )  #> Unit: seconds #>         expr   min    lq  mean median    uq   max neval #>  farr_double 0.782 0.790 1.009  0.799 0.832 1.840     5 #>   farr_float 0.765 0.779 0.929  0.930 1.043 1.127     5 #>       native 0.964 1.174 1.222  1.213 1.370 1.390     5 #>      dipsaus 0.185 0.190 0.202  0.199 0.203 0.233     5"},{"path":"https://dipterix.org/filearray/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Zhengjia Wang. Author, maintainer, copyright holder.","code":""},{"path":"https://dipterix.org/filearray/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wang Z (2023). filearray: File-Backed Array --Memory Computation. https://dipterix.org/filearray/, https://github.com/dipterix/filearray.","code":"@Manual{,   title = {filearray: File-Backed Array for Out-of-Memory Computation},   author = {Zhengjia Wang},   year = {2023},   note = {https://dipterix.org/filearray/, https://github.com/dipterix/filearray}, }"},{"path":"https://dipterix.org/filearray/index.html","id":"file-backed-array-for-out-of-memory-computation","dir":"","previous_headings":"","what":"File-Backed Array for Out-of-Memory Computation","title":"File-Backed Array for Out-of-Memory Computation","text":"Stores large arrays files avoid occupying large memories. Implemented super fast gigabyte-level multi-threaded reading/writing via OpenMP. Supports multiple non-character data types (double, float, integer, complex, logical raw).  Speed comparisons lazyarray (zstd-compressed --memory array), -memory operation. speed test conducted MacBook Air (M1, 2020, 8GB RAM), 8-threads. filearray uniformly faster lazyarray. Random access almost speed native array operation R. (actual speed may vary depending storage type memory size)","code":""},{"path":"https://dipterix.org/filearray/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"File-Backed Array for Out-of-Memory Computation","text":"","code":"install.packages(\"filearray\")"},{"path":"https://dipterix.org/filearray/index.html","id":"install-develop-version","dir":"","previous_headings":"Installation","what":"Install Develop Version","title":"File-Backed Array for Out-of-Memory Computation","text":"internal functions written C++. avoid compiling packages, can install personal repository. ’s automatically updated every hour. Currently available Windows osx (Intel chip) . Alternatively, can compile Github repository. requires proper compilers (rtools windows, xcode-select --install osx, build-essentials linux).","code":"options(repos = c(     dipterix = 'https://dipterix.r-universe.dev',     CRAN = 'https://cloud.r-project.org'))  install.packages('filearray') # install.packages(\"remotes\") remotes::install_github(\"dipterix/filearray\")"},{"path":[]},{"path":"https://dipterix.org/filearray/index.html","id":"createload-file-array","dir":"","previous_headings":"Basic Usage","what":"Create/load file array","title":"File-Backed Array for Out-of-Memory Computation","text":"See : help(\"filearray\")","code":"library(filearray) file <- tempfile() x <- filearray_create(file, c(100, 100, 100, 100))  # load existing x <- filearray_load(file)"},{"path":"https://dipterix.org/filearray/index.html","id":"assign--subset-array","dir":"","previous_headings":"Basic Usage","what":"Assign & subset array","title":"File-Backed Array for Out-of-Memory Computation","text":"","code":"x[,,,1] <- rnorm(1e6) x[1:10,1,1,1]"},{"path":"https://dipterix.org/filearray/index.html","id":"generics","dir":"","previous_headings":"Basic Usage","what":"Generics","title":"File-Backed Array for Out-of-Memory Computation","text":"See : help(\"S3-filearray\"), help(\"fwhich\")","code":"typeof(x) max(x, na.rm = TRUE) apply(x, 3, min, na.rm = TRUE)  val = x[1,1,5,1] fwhich(x, val, arr.ind = TRUE)"},{"path":"https://dipterix.org/filearray/index.html","id":"map-reduce","dir":"","previous_headings":"Basic Usage","what":"Map-reduce","title":"File-Backed Array for Out-of-Memory Computation","text":"Process segments array reduce save memories. See : help(\"mapreduce\")","code":"# Identical to sum(x, na.rm = TRUE) mapreduce(x,            map = \\(data){ sum(data, na.rm = TRUE) },            reduce = \\(mapped){ do.call(sum, mapped) })"},{"path":"https://dipterix.org/filearray/index.html","id":"collapse","dir":"","previous_headings":"Basic Usage","what":"Collapse","title":"File-Backed Array for Out-of-Memory Computation","text":"Transform data, collapse (calculate sum mean) along margins. Available transform double/integer numbers : asis: transform 10log10: 10 * log10(v) square: v * v sqrt: sqrt(v) complex numbers, transform little bit different: asis: transform 10log10: 10 * log10(|x|^2) (power decibel unit) square: |x|^2 sqrt: |x| (modulus) normalize: x / |x| (unit length)","code":"a <- x$collapse(keep = 4, method = \"mean\", transform = \"asis\")  # equivalent to b <- apply(x[], 4, mean)  a[1] - b[1]"},{"path":[]},{"path":"https://dipterix.org/filearray/index.html","id":"i-notes-on-precision","dir":"","previous_headings":"Notes","what":"I. Notes on precision","title":"File-Backed Array for Out-of-Memory Computation","text":"complex numbers: native R, complex numbers combination two double numbers - real imaginary (total 16 bytes). filearray, complex numbers coerced two float numbers store number 8 bytes. conversion gain performance speed, lose precision around 8 decimal place. example, 1.0000001 store 1, 123456789 stored 123456792 (first 7 digits accurate). float type: Native R float type. numeric values stored double precision. Since float numbers use half space, float arrays can faster hard drive speed bottle-neck (see performance comparisons). However coercing double float comes costs: ). float number less precision b). float number smaller range (3.4 × 1038) double (1.7 × 10308) hence use caution data needs high precision max super large. collapse function: data range large (say x[[1]]=1, x[[2]]=10^20), collapse method might lose precision. double uses 8 bytes memory space. calculating summations, R internally uses long double prevent precision loss, current filearray implementation uses double, causing floating error around 16 decimal place.","code":""},{"path":"https://dipterix.org/filearray/index.html","id":"ii-cold-start-vs-warm-start","dir":"","previous_headings":"Notes","what":"II. Cold-start vs warm-start","title":"File-Backed Array for Out-of-Memory Computation","text":"version 0.1.1, file read/write operations switched fopen memory map two simplify logic (buffer size, kernel cache…), boost writing/types reading speed. sacrificing speed reading large block data 2.4GB/s 1.7GB/s, writing speed boosted 300MB/s 700MB/s, speed random accessing small slices data increased 900MB/s 2.5GB/s. result, functions can reach really high speed (close -memory calls) using much less memory. additional performance improvements brought memory mapping approach might impacted “cold” start. reading/writing files, modern systems cache files can load files faster next time. personally call cold start. Memory mapping little bit extra overhead cold start, resulting decreased performance (’s still fast). Accessing data cold start called warm start. operating warm starts, filearray fast native R arrays (sometimes even faster due indexing method fewer garbage collections). means filearray reaches best performance arrays re-used.","code":""},{"path":"https://dipterix.org/filearray/reference/FileArray-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Definition of file array — FileArray-class","title":"Definition of file array — FileArray-class","text":"S4 class definition FileArray. Please  use filearray_create filearray_load create instances.","code":""},{"path":"https://dipterix.org/filearray/reference/FileArray-class.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public Methods","title":"Definition of file array — FileArray-class","text":"get_header(key, default = NULL) Get header information; returns default key missing set_header(key, value) Set header information; extra headers stored meta file. Please store large headers loaded memory frequently. can_write() Whether array data can altered create(filebase, dimension, type = \"double\", partition_size = 1) Create file array instance delete(force = FALSE) Remove array local file system reset dimension() Get dimension vector dimnames(v) Set/get dimension names element_size() Internal storage: bytes per element fill_partition(part, value) Fill partition given scalar get_partition(part, reshape = NULL) Get partition data, reshape (null) desired dimension expand(n) Expand array along last margin; returns true expanded; dimnames assigned prior expansion, last dimension names filled NA initialize_partition() Make sure partition file exists; , create one fill NAs 0 (type='raw') load(filebase, mode = c(\"readwrite\", \"readonly\")) Load file array existing directory partition_path(part) Get partition file path partition_size() Get partition size; see filearray set_partition(part, value, ..., strict = TRUE) Set partition value sexp_type() Get data SEXP type; see R internal manuals show() Print information type() Get data type valid() Check array valid.","code":""},{"path":[]},{"path":"https://dipterix.org/filearray/reference/S3-filearray.html","id":null,"dir":"Reference","previous_headings":"","what":"'S3' methods for 'FileArray' — S3-filearray","title":"'S3' methods for 'FileArray' — S3-filearray","text":"'S3' methods 'FileArray'","code":""},{"path":"https://dipterix.org/filearray/reference/S3-filearray.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"'S3' methods for 'FileArray' — S3-filearray","text":"","code":"# S3 method for FileArray [(   x,   i,   ...,   drop = TRUE,   reshape = NULL,   strict = TRUE,   dimnames = TRUE,   split_dim = 0 )  # S3 method for FileArray [(x, i, ..., lazy = FALSE) <- value  # S3 method for FileArray [[(x, i)  # S3 method for FileArray as.array(x, reshape = NULL, drop = FALSE, ...)  # S3 method for FileArray dim(x)  # S3 method for FileArray dimnames(x)  # S3 method for FileArray dimnames(x) <- value  # S3 method for FileArray length(x)  # S3 method for FileArray max(x, na.rm = FALSE, ...)  # S3 method for FileArray min(x, na.rm = FALSE, ...)  # S3 method for FileArray range(x, na.rm = FALSE, ...)  # S3 method for FileArray sum(x, na.rm = FALSE, ...)  # S3 method for FileArray subset(x, ..., drop = FALSE, .env = parent.frame())"},{"path":"https://dipterix.org/filearray/reference/S3-filearray.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"'S3' methods for 'FileArray' — S3-filearray","text":"x file array , ... index set, passed methods drop whether drop dimensions; see topic Extract reshape new dimension set returning subset results; default NULL (use default dimensions) strict whether allow indices exceed bound; currently accept TRUE dimnames whether preserve dimnames split_dim internally used; split dimension calculate indices manually speed subset; value ranged 0 size dimension minus one. lazy whether lazy-evaluate method, works assigning arrays logical array index value value substitute set na.rm whether remove NA values calculation .env environment evaluate formula evaluating subset margin indices.","code":""},{"path":"https://dipterix.org/filearray/reference/S3-filearray.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"'S3' methods for 'FileArray' — S3-filearray","text":"[: subset array `[`(FileArray) <- value: subset assign array [[: get element index .array(FileArray): converts file array native array R dim(FileArray): get dimensions dimnames(FileArray): get dimension names dimnames(FileArray) <- value: set dimension names length(FileArray): get array length max(FileArray): get max value min(FileArray): get min value range(FileArray): get value range sum(FileArray): get summation subset(FileArray): get subset file array formulae","code":""},{"path":"https://dipterix.org/filearray/reference/S4-filearray.html","id":null,"dir":"Reference","previous_headings":"","what":"'S4' methods for FileArray — S4-filearray","title":"'S4' methods for FileArray — S4-filearray","text":"'S4' methods FileArray","code":""},{"path":"https://dipterix.org/filearray/reference/S4-filearray.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"'S4' methods for FileArray — S4-filearray","text":"","code":"# S4 method for FileArray,FileArray +(e1, e2)  # S4 method for FileArray,numeric +(e1, e2)  # S4 method for numeric,FileArray +(e1, e2)  # S4 method for FileArray,complex +(e1, e2)  # S4 method for complex,FileArray +(e1, e2)  # S4 method for FileArray,logical +(e1, e2)  # S4 method for logical,FileArray +(e1, e2)  # S4 method for FileArray,array +(e1, e2)  # S4 method for array,FileArray +(e1, e2)  # S4 method for FileArray,FileArray -(e1, e2)  # S4 method for FileArray,numeric -(e1, e2)  # S4 method for numeric,FileArray -(e1, e2)  # S4 method for FileArray,complex -(e1, e2)  # S4 method for complex,FileArray -(e1, e2)  # S4 method for FileArray,logical -(e1, e2)  # S4 method for logical,FileArray -(e1, e2)  # S4 method for FileArray,array -(e1, e2)  # S4 method for array,FileArray -(e1, e2)  # S4 method for FileArray,FileArray *(e1, e2)  # S4 method for FileArray,numeric *(e1, e2)  # S4 method for numeric,FileArray *(e1, e2)  # S4 method for FileArray,complex *(e1, e2)  # S4 method for complex,FileArray *(e1, e2)  # S4 method for FileArray,logical *(e1, e2)  # S4 method for logical,FileArray *(e1, e2)  # S4 method for FileArray,array *(e1, e2)  # S4 method for array,FileArray *(e1, e2)  # S4 method for FileArray,FileArray /(e1, e2)  # S4 method for FileArray,numeric /(e1, e2)  # S4 method for numeric,FileArray /(e1, e2)  # S4 method for FileArray,complex /(e1, e2)  # S4 method for complex,FileArray /(e1, e2)  # S4 method for FileArray,logical /(e1, e2)  # S4 method for logical,FileArray /(e1, e2)  # S4 method for FileArray,array /(e1, e2)  # S4 method for array,FileArray /(e1, e2)  # S4 method for FileArray,FileArray ^(e1, e2)  # S4 method for FileArray,numeric ^(e1, e2)  # S4 method for numeric,FileArray ^(e1, e2)  # S4 method for FileArray,complex ^(e1, e2)  # S4 method for complex,FileArray ^(e1, e2)  # S4 method for FileArray,logical ^(e1, e2)  # S4 method for logical,FileArray ^(e1, e2)  # S4 method for FileArray,array ^(e1, e2)  # S4 method for array,FileArray ^(e1, e2)  # S4 method for FileArray,FileArray %%(e1, e2)  # S4 method for FileArray,numeric %%(e1, e2)  # S4 method for numeric,FileArray %%(e1, e2)  # S4 method for FileArray,complex %%(e1, e2)  # S4 method for complex,FileArray %%(e1, e2)  # S4 method for FileArray,logical %%(e1, e2)  # S4 method for logical,FileArray %%(e1, e2)  # S4 method for FileArray,array %%(e1, e2)  # S4 method for array,FileArray %%(e1, e2)  # S4 method for FileArray,FileArray %/%(e1, e2)  # S4 method for FileArray,numeric %/%(e1, e2)  # S4 method for numeric,FileArray %/%(e1, e2)  # S4 method for FileArray,complex %/%(e1, e2)  # S4 method for complex,FileArray %/%(e1, e2)  # S4 method for FileArray,logical %/%(e1, e2)  # S4 method for logical,FileArray %/%(e1, e2)  # S4 method for FileArray,array %/%(e1, e2)  # S4 method for array,FileArray %/%(e1, e2)  # S4 method for FileArray,FileArray ==(e1, e2)  # S4 method for FileArray,numeric ==(e1, e2)  # S4 method for numeric,FileArray ==(e1, e2)  # S4 method for FileArray,complex ==(e1, e2)  # S4 method for complex,FileArray ==(e1, e2)  # S4 method for FileArray,logical ==(e1, e2)  # S4 method for logical,FileArray ==(e1, e2)  # S4 method for FileArray,array ==(e1, e2)  # S4 method for array,FileArray ==(e1, e2)  # S4 method for FileArray,FileArray &gt;(e1, e2)  # S4 method for FileArray,numeric &gt;(e1, e2)  # S4 method for numeric,FileArray &gt;(e1, e2)  # S4 method for FileArray,complex &gt;(e1, e2)  # S4 method for complex,FileArray &gt;(e1, e2)  # S4 method for FileArray,logical &gt;(e1, e2)  # S4 method for logical,FileArray &gt;(e1, e2)  # S4 method for FileArray,array &gt;(e1, e2)  # S4 method for array,FileArray &gt;(e1, e2)  # S4 method for FileArray,FileArray &lt;(e1, e2)  # S4 method for FileArray,numeric &lt;(e1, e2)  # S4 method for numeric,FileArray &lt;(e1, e2)  # S4 method for FileArray,complex &lt;(e1, e2)  # S4 method for complex,FileArray &lt;(e1, e2)  # S4 method for FileArray,logical &lt;(e1, e2)  # S4 method for logical,FileArray &lt;(e1, e2)  # S4 method for FileArray,array &lt;(e1, e2)  # S4 method for array,FileArray &lt;(e1, e2)  # S4 method for FileArray,FileArray !=(e1, e2)  # S4 method for FileArray,numeric !=(e1, e2)  # S4 method for numeric,FileArray !=(e1, e2)  # S4 method for FileArray,complex !=(e1, e2)  # S4 method for complex,FileArray !=(e1, e2)  # S4 method for FileArray,logical !=(e1, e2)  # S4 method for logical,FileArray !=(e1, e2)  # S4 method for FileArray,array !=(e1, e2)  # S4 method for array,FileArray !=(e1, e2)  # S4 method for FileArray,FileArray &gt;=(e1, e2)  # S4 method for FileArray,numeric &gt;=(e1, e2)  # S4 method for numeric,FileArray &gt;=(e1, e2)  # S4 method for FileArray,complex &gt;=(e1, e2)  # S4 method for complex,FileArray &gt;=(e1, e2)  # S4 method for FileArray,logical &gt;=(e1, e2)  # S4 method for logical,FileArray &gt;=(e1, e2)  # S4 method for FileArray,array &gt;=(e1, e2)  # S4 method for array,FileArray &gt;=(e1, e2)  # S4 method for FileArray,FileArray &lt;=(e1, e2)  # S4 method for FileArray,numeric &lt;=(e1, e2)  # S4 method for numeric,FileArray &lt;=(e1, e2)  # S4 method for FileArray,complex &lt;=(e1, e2)  # S4 method for complex,FileArray &lt;=(e1, e2)  # S4 method for FileArray,logical &lt;=(e1, e2)  # S4 method for logical,FileArray &lt;=(e1, e2)  # S4 method for FileArray,array &lt;=(e1, e2)  # S4 method for array,FileArray &lt;=(e1, e2)  # S4 method for FileArray,FileArray &amp;(e1, e2)  # S4 method for FileArray,numeric &amp;(e1, e2)  # S4 method for numeric,FileArray &amp;(e1, e2)  # S4 method for FileArray,complex &amp;(e1, e2)  # S4 method for complex,FileArray &amp;(e1, e2)  # S4 method for FileArray,logical &amp;(e1, e2)  # S4 method for logical,FileArray &amp;(e1, e2)  # S4 method for FileArray,array &amp;(e1, e2)  # S4 method for array,FileArray &amp;(e1, e2)  # S4 method for FileArray,FileArray |(e1, e2)  # S4 method for FileArray,numeric |(e1, e2)  # S4 method for numeric,FileArray |(e1, e2)  # S4 method for FileArray,complex |(e1, e2)  # S4 method for complex,FileArray |(e1, e2)  # S4 method for FileArray,logical |(e1, e2)  # S4 method for logical,FileArray |(e1, e2)  # S4 method for FileArray,array |(e1, e2)  # S4 method for array,FileArray |(e1, e2)  # S4 method for FileArray !(x)  # S4 method for FileArray exp(x)  # S4 method for FileArray expm1(x)  # S4 method for FileArray log(x, base = exp(1))  # S4 method for FileArray log10(x)  # S4 method for FileArray log2(x)  # S4 method for FileArray log1p(x)  # S4 method for FileArray abs(x)  # S4 method for FileArray sqrt(x)  # S4 method for FileArray sign(x)  # S4 method for FileArray signif(x, digits = 6)  # S4 method for FileArray trunc(x, ...)  # S4 method for FileArray floor(x)  # S4 method for FileArray ceiling(x)  # S4 method for FileArray round(x, digits = 0)  # S4 method for FileArray acos(x)  # S4 method for FileArray acosh(x)  # S4 method for FileArray asin(x)  # S4 method for FileArray asinh(x)  # S4 method for FileArray atan(x)  # S4 method for FileArray atanh(x)  # S4 method for FileArray cos(x)  # S4 method for FileArray cosh(x)  # S4 method for FileArray cospi(x)  # S4 method for FileArray sin(x)  # S4 method for FileArray sinh(x)  # S4 method for FileArray sinpi(x)  # S4 method for FileArray tan(x)  # S4 method for FileArray tanh(x)  # S4 method for FileArray tanpi(x)  # S4 method for FileArray gamma(x)  # S4 method for FileArray lgamma(x)  # S4 method for FileArray digamma(x)  # S4 method for FileArray trigamma(x)  # S4 method for FileArray Arg(z)  # S4 method for FileArray Conj(z)  # S4 method for FileArray Im(z)  # S4 method for FileArray Mod(z)  # S4 method for FileArray Re(z)  # S4 method for FileArray is.na(x)"},{"path":"https://dipterix.org/filearray/reference/S4-filearray.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"'S4' methods for FileArray — S4-filearray","text":"x, z, e1, e2 FileArray compatible data base, digits, ... passed methods","code":""},{"path":"https://dipterix.org/filearray/reference/S4-filearray.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"'S4' methods for FileArray — S4-filearray","text":"See S4groupGeneric","code":""},{"path":"https://dipterix.org/filearray/reference/apply.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply functions over file array margins (extended) — apply","title":"Apply functions over file array margins (extended) — apply","text":"Apply functions file array margins (extended)","code":""},{"path":"https://dipterix.org/filearray/reference/apply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply functions over file array margins (extended) — apply","text":"","code":"apply(X, MARGIN, FUN, ..., simplify = TRUE)  # S4 method for FileArray apply(X, MARGIN, FUN, ..., simplify = TRUE)  # S4 method for FileArrayProxy apply(X, MARGIN, FUN, ..., simplify = TRUE)"},{"path":"https://dipterix.org/filearray/reference/apply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply functions over file array margins (extended) — apply","text":"X file array MARGIN scalar giving subscripts function applied . Current implementation allows margin size one FUN function applied ... optional arguments FUN simplify logical indicating whether results simplified possible","code":""},{"path":"https://dipterix.org/filearray/reference/apply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply functions over file array margins (extended) — apply","text":"See Section 'Value' apply;","code":""},{"path":"https://dipterix.org/filearray/reference/filearray.html","id":null,"dir":"Reference","previous_headings":"","what":"Create or load existing file arrays — as_filearray","title":"Create or load existing file arrays — as_filearray","text":"Create load existing file arrays","code":""},{"path":"https://dipterix.org/filearray/reference/filearray.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create or load existing file arrays — as_filearray","text":"","code":"as_filearray(x, ...)  as_filearrayproxy(x, ...)  filearray_create(   filebase,   dimension,   type = c(\"double\", \"float\", \"integer\", \"logical\", \"raw\", \"complex\"),   partition_size = NA,   initialize = FALSE,   ... )  filearray_load(filebase, mode = c(\"readwrite\", \"readonly\"))  filearray_checkload(   filebase,   mode = c(\"readonly\", \"readwrite\"),   ...,   symlink_ok = TRUE )  filearray_load_or_create(   filebase,   dimension,   on_missing = NULL,   type = NA,   ...,   mode = c(\"readonly\", \"readwrite\"),   symlink_ok = TRUE,   initialize = FALSE,   partition_size = NA,   verbose = FALSE )"},{"path":"https://dipterix.org/filearray/reference/filearray.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create or load existing file arrays — as_filearray","text":"x R object array, file array proxy, character can  transformed file array ... additional headers check used filearray_checkload (see 'Details'). argument ignored filearray_create,  reserved future compatibility. filebase directory path store arrays local file  system. creating array, path must exist. dimension dimension array, least length 2 type storage type array; default 'double'. options include 'integer', 'logical', 'raw'. partition_size positive partition size last margin, NA automatically guess; see 'Details'. initialize whether initialize partition files; default false performance considerations. However, array dense,  recommended set true mode whether allows writing file; choices  'readwrite' 'readonly'. symlink_ok whether arrays symbolic-link partitions can pass  test; usually used bound arrays symbolic-links; see  filearray_bind; on_missing function handle file array (initialization) new array created; must take one argument, array object verbose whether print debug messages","code":""},{"path":"https://dipterix.org/filearray/reference/filearray.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create or load existing file arrays — as_filearray","text":"FileArray-class instance.","code":""},{"path":"https://dipterix.org/filearray/reference/filearray.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create or load existing file arrays — as_filearray","text":"file arrays partition --memory array objects store  separately local file systems. Since R stores matrices/arrays  column-major style, file array uses slowest margin ( last margin) slice partitions. helps align elements within files corresponding memory order. array  dimension 100x200x300x400 4 margins. length  last margin 400, also maximum number potential partitions. number partitions determined last margin size divided partition_size. example, partition size 1, 400 partitions. partition size  3, 134 partitions. default partition sizes  determined internally following priorities: 1. file size partition exceed 1GB 2. number partitions exceed 100 two rules hard requirements. goal reduce numbers partitions much possible. arguments ... filearray_checkload named arguments provide additional checks header information.  check fail least one header identical. example, array contains header key-signature pair, one can use  filearray_checkload(..., key = signature) validate signature. Note comparison rigid, meaning storage type headers  considered well. signature stored array  integer provided double, check result failure.","code":""},{"path":"https://dipterix.org/filearray/reference/filearray.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create or load existing file arrays — as_filearray","text":"Zhengjia Wang","code":""},{"path":"https://dipterix.org/filearray/reference/filearray.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create or load existing file arrays — as_filearray","text":"","code":"# Prepare  library(filearray) filebase <- tempfile() if(file.exists(filebase)){ unlink(filebase, TRUE) }  # create array x <- filearray_create(filebase, dimension = c(200, 30, 8)) print(x) #> Reference class object of class \"FileArray\" #> Mode: readwrite  #> Dimension: 200x30x8  #> Partition count: 8  #> Partition size: 1  #> Storage type: double (internal size: 8) #> Location: /tmp/RtmpmH1J4B/file158e10894e3a   # Assign values x[] <- rnorm(48000)  # Subset x[1,2,] #> [1] -0.7212988 -0.1909822 -0.4978954 -0.7825754 -0.5994925 -1.8312145  0.7364004 #> [8] -0.5846929  # load existing array filearray_load(filebase) #> Reference class object of class \"FileArray\" #> Mode: readwrite  #> Dimension: 200x30x8  #> Partition count: 8  #> Partition size: 1  #> Storage type: double (internal size: 8) #> Location: /tmp/RtmpmH1J4B/file158e10894e3a   x$set_header(\"signature\", \"tom\") filearray_checkload(filebase, signature = \"tom\") #> Reference class object of class \"FileArray\" #> Mode: readonly  #> Dimension: 200x30x8  #> Partition count: 8  #> Partition size: 1  #> Storage type: double (internal size: 8) #> Location: /tmp/RtmpmH1J4B/file158e10894e3a   if (FALSE) { # Trying to load with wrong signature filearray_checkload(filebase, signature = \"jerry\") }   # check-load, and create a new array if fail x <- filearray_load_or_create(     filebase = filebase, dimension = c(200, 30, 8),     verbose = TRUE, signature = \"henry\" ) #> `filearray_load_or_create`: cannot load the existing file array: The header `signature` (\"tom\") is not identical with given values (\"henry\"). #> Trying creating a new one. If the array already exists, its file path will be removed. x$get_header(\"signature\") #> [1] \"henry\"  # check-load with initialization x <- filearray_load_or_create(     filebase = filebase,      dimension = c(3, 4, 5),     verbose = TRUE, mode = \"readonly\",     on_missing = function(array) {         array[] <- seq_len(60)     } ) #> `filearray_load_or_create`: cannot load the existing file array: `filearray_load_or_create`: Requested dimension does not match with existing array. #> Trying creating a new one. If the array already exists, its file path will be removed.  x[1:3,1,1] #> [1] 1 2 3  # Clean up unlink(filebase, recursive = TRUE)"},{"path":"https://dipterix.org/filearray/reference/filearray_bind.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge and bind homogeneous file arrays — filearray_bind","title":"Merge and bind homogeneous file arrays — filearray_bind","text":"file arrays merged must homogeneous: data type, partition size, partition length","code":""},{"path":"https://dipterix.org/filearray/reference/filearray_bind.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge and bind homogeneous file arrays — filearray_bind","text":"","code":"filearray_bind(   ...,   .list = list(),   filebase = tempfile(),   symlink = FALSE,   overwrite = FALSE,   cache_ok = FALSE )"},{"path":"https://dipterix.org/filearray/reference/filearray_bind.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge and bind homogeneous file arrays — filearray_bind","text":"..., .list file array instances filebase create merged array symlink whether use file.symlink; true, partition files symbolic-linked original arrays, otherwise partition files copied . want data portable, use symbolic-links. default value FALSE overwrite whether overwrite filebase already exists; default false, raises errors cache_ok see 'Details', used overwrite true.","code":""},{"path":"https://dipterix.org/filearray/reference/filearray_bind.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge and bind homogeneous file arrays — filearray_bind","text":"bound array 'FileArray' class.","code":""},{"path":"https://dipterix.org/filearray/reference/filearray_bind.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Merge and bind homogeneous file arrays — filearray_bind","text":"input arrays must share data type partition size. dimension partition also . example array x1 dimension \\(100x20x30\\) partition size  1, partition dimension \\(100x20x1\\),  30 partitions. x1 can bind another array  partition size. means x2 dimension \\(100x20x40\\) partition size 1, x1  x2 can merged. filebase exists overwrite FALSE, error  always raise. overwrite=TRUE cache_ok=FALSE, existing filebase erased data stored within lost.  overwrite cache_ok TRUE,  , erasing filebase, function validates existing array header compare header signatures. existing header signature array created, existing array  returned. cache_ok extremely useful binding large arrays symlink=FALSE cache might avoid moving files around. However, cache_ok enabled caution. header information compared,  partition data compared. existing array generated old versions source arrays, data source arrays altered, cache_ok=TRUE rarely proper cache outdated. symlink option used extra caution. Creating  symbolic links definitely faster copying partition files. However,  since partition files simply linked original partition files,  changing input arrays also affect merged arrays,  vice versa; see 'Examples'. Also arrays created symbolic links,  original  arrays deleted, merged arrays invalidated,  corresponding partitions longer accessible. Attempts  set deleted partitions likely result failure. Therefore symlink set true creating merged arrays temporary read-purpose, speed disk space consideration. extended reading, please check files  details.","code":""},{"path":"https://dipterix.org/filearray/reference/filearray_bind.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge and bind homogeneous file arrays — filearray_bind","text":"","code":"partition_size <- 1 type <- \"double\" x1 <- filearray_create(     tempfile(), c(2,2), type = type,     partition_size = partition_size) x1[] <- 1:4 x2 <- filearray_create(     tempfile(), c(2,1), type = type,     partition_size = partition_size) x2[] <- 5:6  y1 <- filearray_bind(x1, x2, symlink = FALSE) y2 <- filearray_bind(x1, x2)  # y1 copies partition files, and y2 simply creates links  # if symlink is supported  y1[] - y2[] #>      [,1] [,2] [,3] #> [1,]    0    0    0 #> [2,]    0    0    0  # change x1 x1[1,1] <- NA  # y1 is not affected y1[] #>      [,1] [,2] [,3] #> [1,]    1    3    5 #> [2,]    2    4    6  # y2 changes  y2[] #>      [,1] [,2] [,3] #> [1,]    1    3    5 #> [2,]    2    4    6"},{"path":"https://dipterix.org/filearray/reference/filearray_threads.html","id":null,"dir":"Reference","previous_headings":"","what":"Set or get file array threads — filearray_threads","title":"Set or get file array threads — filearray_threads","text":"enable/disable multi-threaded reading writing C++ level.","code":""},{"path":"https://dipterix.org/filearray/reference/filearray_threads.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set or get file array threads — filearray_threads","text":"","code":"filearray_threads(n, ...)"},{"path":"https://dipterix.org/filearray/reference/filearray_threads.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set or get file array threads — filearray_threads","text":"n number threads set. n negative, default number cores computer . ... internally used","code":""},{"path":"https://dipterix.org/filearray/reference/filearray_threads.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set or get file array threads — filearray_threads","text":"integer current number threads","code":""},{"path":"https://dipterix.org/filearray/reference/fmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Map multiple file arrays and save results — fmap","title":"Map multiple file arrays and save results — fmap","text":"Advanced mapping function multiple file arrays. fmap runs mapping functions stores results file arrays.  fmap2 stores results memory.  feature experimental. several constraints input.  Failure meet constraints may result undefined results,  even crashes. Please read Section 'Details' carefully using  function.","code":""},{"path":"https://dipterix.org/filearray/reference/fmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map multiple file arrays and save results — fmap","text":"","code":"fmap(   x,   fun,   .y = NULL,   .buffer_count = NA_integer_,   .output_size = NA_integer_,   ... )  fmap2(x, fun, .buffer_count = NA, .simplify = TRUE, ...)  fmap_element_wise(x, fun, .y, ..., .input_size = NA)"},{"path":"https://dipterix.org/filearray/reference/fmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map multiple file arrays and save results — fmap","text":"x list file arrays map; element x must  share dimensions. fun function takes one list .y file array object, used save results .buffer_count number total buffers (chunks) run .output_size fun output vector length ... arguments passing fun .simplify whether apply simplify2array  result .input_size number elements read array x","code":""},{"path":"https://dipterix.org/filearray/reference/fmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map multiple file arrays and save results — fmap","text":"File array instance .y","code":""},{"path":"https://dipterix.org/filearray/reference/fmap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Map multiple file arrays and save results — fmap","text":"Denote first argument fun input, length  input equals length x. size element input defined .input_size, except last loop. example, given dimension input array  \\(10x10x10x10\\), .input_size=100,  length(input[[1]])=100. total number runs equals length(x[[1]])/100. .input_size=300,  length(input[[1]]) 300 except last run.  \\(10000\\) divided 300.  element length last run 100. returned variable length fun checked  .output_size. output length exceed .output_size,  error raised. Please make sure length(.y)/length(x[[1]]) equals  .output_size/.input_size. fmap_element_wise, input[[1]] output length  must consistent.","code":""},{"path":"https://dipterix.org/filearray/reference/fmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map multiple file arrays and save results — fmap","text":"","code":"set.seed(1) x1 <- filearray_create(tempfile(), dimension = c(100,20,3)) x1[] <- rnorm(6000) x2 <- filearray_create(tempfile(), dimension = c(100,20,3)) x2[] <- rnorm(6000)  # Add two arrays output <- filearray_create(tempfile(), dimension = c(100,20,3)) fmap(list(x1, x2), function(input){     input[[1]] + input[[2]] }, output) #> Reference class object of class \"FileArray\" #> Mode: readwrite  #> Dimension: 100x20x3  #> Partition count: 3  #> Partition size: 1  #> Storage type: double (internal size: 8) #> Location: /tmp/RtmpmH1J4B/file158e3ffbf49d   # check range(output[] - (x1[] + x2[])) #> [1] 0 0  output$delete()  # Calculate the maximum of x1/x2 for every 100 elements output <- filearray_create(tempfile(), dimension = c(20,3)) fmap(list(x1, x2), function(input){     max(input[[1]] / input[[2]]) }, output, .input_size = 100, .output_size = 1) #> Warning: `fmap`: .output_size is deprecated. Please specify `.y` instead #> Error in (function (input) {    max(input[[1]]/input[[2]])})(data, .input_size = 100): unused argument (.input_size = 100) #> Warning: C++ `FARR_buffer_map`: cannot finish map #> Reference class object of class \"FileArray\" #> Mode: readwrite  #> Dimension: 20x3  #> Partition count: 3  #> Partition size: 1  #> Storage type: double (internal size: 8) #> Location: /tmp/RtmpmH1J4B/file158e33dc1811   # check range(output[] - apply(x1[] / x2[], c(2,3), max)) #> [1] NA NA  output$delete()  # A large array example if(interactive()){     x <- filearray_create(tempfile(), dimension = c(287, 100, 301, 4))     dimnames(x) <- list(         Trial = 1:287,         Marker = 1:100,         Time = 1:301,         Location = 1:4     )          for(i in 1:4){         x[,,,i] <- runif(8638700)     }     # Step 1:     # for each location, trial, and marker, calibrate (baseline)     # according to first 50 time-points          output <- filearray_create(tempfile(), dimension = dim(x))          # baseline-percentage change     fmap(         list(x),          function(input){             # get locational data             location_data <- input[[1]]             dim(location_data) <- c(287, 100, 301)                          # collapse over first 50 time points for              # each trial, and marker             baseline <- apply(location_data[,,1:50], c(1,2), mean)                          # calibrate             calibrated <- sweep(location_data, c(1,2), baseline,                                  FUN = function(data, bl){                                     (data / bl - 1) * 100                                 })             return(calibrated)         },                   .y = output,                  # input dimension is 287 x 100 x 301 for each location         .input_size = 8638700,                  # output dimension is 287 x 100 x 301         .output_size = 8638700     )          # cleanup     x$delete()      }  # cleanup x1$delete() x2$delete() output$delete()"},{"path":"https://dipterix.org/filearray/reference/fwhich.html","id":null,"dir":"Reference","previous_headings":"","what":"A generic function of which that is 'FileArray' compatible — fwhich","title":"A generic function of which that is 'FileArray' compatible — fwhich","text":"generic function 'FileArray' compatible","code":""},{"path":"https://dipterix.org/filearray/reference/fwhich.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A generic function of which that is 'FileArray' compatible — fwhich","text":"","code":"fwhich(x, val, arr.ind = FALSE, ...)  # S3 method for default fwhich(x, val, arr.ind = FALSE, ...)  # S3 method for FileArray fwhich(x, val, arr.ind = FALSE, ...)"},{"path":"https://dipterix.org/filearray/reference/fwhich.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A generic function of which that is 'FileArray' compatible — fwhich","text":"x R vector, matrix, array file-array val values find arr.ind logical; array indices  returned x array? ... passed arrayInd","code":""},{"path":"https://dipterix.org/filearray/reference/fwhich.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A generic function of which that is 'FileArray' compatible — fwhich","text":"indices x elements listed val.","code":""},{"path":"https://dipterix.org/filearray/reference/fwhich.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A generic function of which that is 'FileArray' compatible — fwhich","text":"","code":"# Default case x <- array(1:27, rep(3,3)) fwhich(x, c(4,5)) #> [1] 4 5  # file-array case arr <- filearray_create(tempfile(), dim(x)) arr[] <- x fwhich(arr, c(4,5)) #> [1] 4 5"},{"path":"https://dipterix.org/filearray/reference/mapreduce.html","id":null,"dir":"Reference","previous_headings":"","what":"A map-reduce method to iterate blocks of file-array data with little memory usage — mapreduce","title":"A map-reduce method to iterate blocks of file-array data with little memory usage — mapreduce","text":"map-reduce method iterate blocks file-array data little memory usage","code":""},{"path":"https://dipterix.org/filearray/reference/mapreduce.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A map-reduce method to iterate blocks of file-array data with little memory usage — mapreduce","text":"","code":"mapreduce(x, map, reduce, ...)  # S4 method for FileArray,ANY,`function` mapreduce(x, map, reduce, buffer_size = NA, ...)  # S4 method for FileArray,ANY,`NULL` mapreduce(x, map, reduce, buffer_size = NA, ...)  # S4 method for FileArray,ANY,missing mapreduce(x, map, reduce, buffer_size = NA, ...)"},{"path":"https://dipterix.org/filearray/reference/mapreduce.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A map-reduce method to iterate blocks of file-array data with little memory usage — mapreduce","text":"x file array object map mapping function receives 3 arguments; see 'Details' reduce NULL, function takes list input ... passed methods buffer_size control split array; see 'Details'","code":""},{"path":"https://dipterix.org/filearray/reference/mapreduce.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A map-reduce method to iterate blocks of file-array data with little memory usage — mapreduce","text":"reduce NULL, return mapped results, otherwise return reduced results reduce function","code":""},{"path":"https://dipterix.org/filearray/reference/mapreduce.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A map-reduce method to iterate blocks of file-array data with little memory usage — mapreduce","text":"handling --memory arrays, recommended load block array time execute block level. See  apply implementation. array large, many blocks, operation become  slow computer memory low.  R perform garbage collection frequently.  Implemented C++, mapreduce creates buffer store block data. reusing memory , possible iterate array minimal garbage collections. Many  statistics, including min, max, sum,  mean, ... statistics can calculated  way efficiently. function map contains three arguments: data (mandate),  size (optional), first_index (optional).  data buffer, whose length consistent across iterations. size indicates effective size buffer. partition size divisible buffer size, first size elements data array, rest elements NA.  situation occurs buffer_size manually  specified. default, data belong arrays. last argument first_index index first element data[1] whole array. useful positional data  needed. buffer size, specified buffer_size  additional optional argument .... default NA, calculated automatically. manually specified, large buffer size desired speed calculation. default buffer size exceed \\(nThreads x 2MB\\),  nThreads number threads set filearray_threads. partition length divided buffer size, instead trimming buffer, NAs filled buffer,  passed map function; see previous paragraph treatments. function mapreduce ignores missing partitions. means partition missing, data read passed  map function. Please run x$initialize_partition() make sure partition files exist.","code":""},{"path":"https://dipterix.org/filearray/reference/mapreduce.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A map-reduce method to iterate blocks of file-array data with little memory usage — mapreduce","text":"","code":"x <- filearray_create(tempfile(), c(100, 100, 10)) x[] <- rnorm(1e5)  ## calculate summation # identical to sum(x[]), but is more feasible in large cases  mapreduce(x, map = function(data, size){     # make sure `data` is all from array     if(length(data) != size){         data <- data[1:size]     }     sum(data) }, reduce = function(mapped_list){     do.call(sum, mapped_list) }) #> [1] -57.8865   ## Find elements are less than -3 positions <- mapreduce(     x,     map = function(data, size, first_index) {         if (length(data) != size) {             data <- data[1:size]         }         which(data < -3) + (first_index - 1)     },     reduce = function(mapped_list) {         do.call(c, mapped_list)     } )  if(length(positions)){     x[[positions[1]]] } #> [1] -3.007064"},{"path":"https://dipterix.org/filearray/reference/typeof.html","id":null,"dir":"Reference","previous_headings":"","what":"The type of a file array (extended) — typeof","title":"The type of a file array (extended) — typeof","text":"type file array (extended)","code":""},{"path":"https://dipterix.org/filearray/reference/typeof.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The type of a file array (extended) — typeof","text":"","code":"typeof(x)  # S4 method for FileArray typeof(x)  # S4 method for FileArrayProxy typeof(x)"},{"path":"https://dipterix.org/filearray/reference/typeof.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The type of a file array (extended) — typeof","text":"x file array","code":""},{"path":"https://dipterix.org/filearray/reference/typeof.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The type of a file array (extended) — typeof","text":"character string. possible values \"double\", \"integer\", \"logical\", \"raw\"","code":""},{"path":"https://dipterix.org/filearray/news/index.html","id":"filearray-016","dir":"Changelog","previous_headings":"","what":"filearray 0.1.6","title":"filearray 0.1.6","text":"Removed c++11 system requirement Makevars Used TinyThreads instead OpenMP get parallel working OSX Added as_filearray method, support optional float Added array proxy class, allowing arrays lazy-evaluate simple operators Allows user-defined temporary file array path Fixed fmap issues, using better guesses default .input_size Fixed memory bug caused partition margin elements greater 1 FARR_subset_sequential used Used fastmap avoid environment look-fa_eval_ops allows dimension names Larger default buffer size allow 2^20 single partition Disabled single indexing Fixed endian issue big-endian platforms","code":""},{"path":"https://dipterix.org/filearray/news/index.html","id":"filearray-015","dir":"Changelog","previous_headings":"","what":"filearray 0.1.5","title":"filearray 0.1.5","text":"CRAN release: 2022-10-16 Fixed bug trying read array data sequentially. bug caused buffer size greater array length, making pointer controls partition number exceed end vector, resulting undefined behavior. functions affected : fmap, fmap2. bug fixed passed valgrind memory check.","code":""},{"path":"https://dipterix.org/filearray/news/index.html","id":"filearray-014","dir":"Changelog","previous_headings":"","what":"filearray 0.1.4","title":"filearray 0.1.4","text":"CRAN release: 2022-08-06 Fixed bug allocated memory one byte short requested. bug crash R triggered certain cases. Removed limit maximum number partitions writing. previous implementation creates opens related file descriptors writing. setup raise errors number connections reach certain limit, often defined operating systems. update opens connection demand. performance might impacted writing disk, return, program robust Fixed subset function environment resolved correctly using formula Added filearray_load_or_create alternative filearray_checkload automatically replace existing obsolete array files headers, dimensions, data types don’t match. Also on_missing argument provided allow array initialization new array created.","code":""},{"path":"https://dipterix.org/filearray/news/index.html","id":"filearray-013","dir":"Changelog","previous_headings":"","what":"filearray 0.1.3","title":"filearray 0.1.3","text":"CRAN release: 2022-01-28 Automatically detect whether symbolic-link works show warnings Warnings can suppressed Allow extra headers set meta file Added header signature method Fixed symbolic-link issues Windows partition sizes 0 Added check-load function filearray_checkload validate header Fixed collapse method dimnames set Fixed unprotected variable C++ code filearray_bind can use cache header signatures agree filearray_bind can choose force overwrite Added package digest Imports Fixed typo several small bugs","code":""},{"path":"https://dipterix.org/filearray/news/index.html","id":"filearray-012","dir":"Changelog","previous_headings":"","what":"filearray 0.1.2","title":"filearray 0.1.2","text":"CRAN release: 2021-11-25 Removed flush saving data let system decide flush hard drive Allowed array expand along partition margin Fixed dimension name getting dropped certain situations Use 2 cores default R CMD check detected","code":""},{"path":"https://dipterix.org/filearray/news/index.html","id":"filearray-011","dir":"Changelog","previous_headings":"","what":"filearray 0.1.1","title":"filearray 0.1.1","text":"CRAN release: 2021-09-19 Added OpenMP flag MakeVars Fixed critical bugs cause segfaults Can store complex float data types Re-implemented read/write functions use memory map Allowed dimnames set Added generics subset subset using dimnames Added vignette compare performance Added speed comparisons README.md Added collapse calculate marginal summation little memory overhead Added fmap, fmap2 apply functions one multiple file arrays little memory overhead (also fast) Fixed ‘unprotected’ issues warned rchk","code":""},{"path":"https://dipterix.org/filearray/news/index.html","id":"filearray-010","dir":"Changelog","previous_headings":"","what":"filearray 0.1.0","title":"filearray 0.1.0","text":"CRAN release: 2021-09-08 Added NEWS.md file track changes package. Initial implementation","code":""}]
